#!/bin/bash
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
echo "Create OSX application bundle for .NET project"

if [ -z "$1" ] ; then
  echo "Syntax: publish-osx AppName [runtime]"
  echo "Runtime: osx-x64 or osx-arm64"
  exit 1
fi
runtime=$2
if [ -z "$2" ] ; then
  runtime="osx-x64"
fi
cd "../$1" || { echo "Application folder $1 not found."; exit 127; }

# Read from project file: AssemblyVersion, Product, LSApplicationCategoryType
version=$(grep -oPm1 "(?<=<AssemblyVersion>)[^<]+" "$1.csproj")
if [ -z "$version" ] ; then
  echo "AssemblyVersion is missing from project file."
  exit 1
fi
product=$(grep -oPm1 "(?<=<Product>)[^<]+" "$1.csproj")
if [ -z "$product" ] ; then
  echo "Product is missing from project file."
  exit 1
fi
category=$(grep -oPm1 "(?<=<LSApplicationCategoryType>)[^<]+" "$1.csproj")
if [ -z "$category" ] ; then
  echo "LSApplicationCategoryType is missing from project file. See Apple documentation."
  exit 1
fi

case "$runtime" in
    "osx-x64") arch="MacOS_x64" ;;
    "osx-arm64") arch="MacOS_arm64" ;;
    *) arch="$runtime" ;;
esac

bundlePath=bin/Publish/$runtime
publishPath=$bundlePath/$1.app/Contents/MacOS
outPath="../Publish/${version}"
outFile="${1}-${version}_${arch}.zip"
echo "Runtime = $runtime"
echo "AppName = $1"
echo "Version = $version"
echo "Category = $category"
echo "BundlePath = $bundlePath"
echo "Output = $outPath/$outFile"
echo
rm -rf "$bundlePath" 2>/dev/null

dotnet publish -r $runtime -c Release --self-contained=true -p:PublishSingleFile=true -p:DebugType=None -o "$publishPath"
#rm "$publishPath/*.xml"
find "$publishPath" -maxdepth 1 -type f -name "*.xml" -delete

osxApp="$bundlePath/$1.app"
echo "Creating OSX app bundle... $osxApp"
mkdir -p "$osxApp/Contents/Resources"

cp -af "Assets/App.icns" "$osxApp/Contents/Resources/$1.icns"
cp -af "$SCRIPT_DIR/Info.plist" "$osxApp/Contents/Info.plist"
cp -af "$SCRIPT_DIR/App.entitlements" "$osxApp/Contents/$1.entitlements"

# Replace strings in Info.plist template
sed -i "s/#VERSION/$version/g" "$osxApp/Contents/Info.plist" 2>/dev/null    # Linux
sed -i '' "s/#VERSION/$version/g" "$osxApp/Contents/Info.plist" 2>/dev/null # macOS
sed -i "s/#APP/$1/g" "$osxApp/Contents/Info.plist" 2>/dev/null    # Linux
sed -i '' "s/#APP/$1/g" "$osxApp/Contents/Info.plist" 2>/dev/null # macOS
sed -i "s/#PRODUCT/$product/g" "$osxApp/Contents/Info.plist" 2>/dev/null    # Linux
sed -i '' "s/#PRODUCT/$product/g" "$osxApp/Contents/Info.plist" 2>/dev/null # macOS
sed -i "s/#CATEGORY/$category/g" "$osxApp/Contents/Info.plist" 2>/dev/null    # Linux
sed -i '' "s/#CATEGORY/$category/g" "$osxApp/Contents/Info.plist" 2>/dev/null # macOS

# Create ZIP file
mkdir -p "$outPath"
outPath=$(readlink --canonicalize "$outPath/$outFile")
echo "Creating ZIP file: $outPath"
rm -f "$outPath"
cd "$bundlePath" || { exit 127; }
zip -6 -r "$outPath" ./*
